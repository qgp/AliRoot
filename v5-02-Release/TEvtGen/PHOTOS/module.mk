#**************************************************************************
#**** This file is automatically generated from the mkmodules script  *****
#****          DO NOT EDIT!!                                          *****
#**************************************************************************
#-*- Mode: Makefile -*-

#********** This part is for package photos ***********

#Determine if it's a library or a executable
TYPE=lib

# Package head directory, source and include directories
MODDIR:=PHOTOS
MODDIRS:=$(MODDIR)
MODDIRI:=$(MODDIR)
MODDIRO:=$(MODDIR)/tgt_$(ALICE_TARGET)
MODDIRC:=$(MODDIR)/check
MODDIRZ:=$(MODDIR)/smell
PHOTOSDIRO:=PHOTOS/tgt_$(ALICE_TARGET)

# Reseting variables before importing pkg-file
SRCS:=
HDRS:=
FSRCS:=
DHDR:=
CSRCS:=
CHDRS:=
EINCLUDE:=
EDEFINE:=
ELIBS:=
ELIBSDIR:=
PACKFFLAGS:=
PACKCXXFLAGS:=
PACKCFLAGS:=
PACKDYFLAGS:=
PACKSOFLAGS:=
PACKLDFLAGS:=
PACKBLIBS:=
EXPORT:=
EHDRS:=
CINTHDRS:=
CINTAUTOLINK:=
ARLIBS:=
SHLIBS:=

#-*- Mode: Makefile -*-

FSRCS= phcork.F phint.F phint1.F phlupa.F phoan1.F phoan2.F phobo3.F \
phobos.F phocha.F phochk.F phocin.F phocor.F phodo.F phoene.F phoerr.F \
phofac.F phoin.F phoinf.F phoini.F phomak.F phooma.F phoout.F phopre.F \
phoran.F phorep.F phorin.F phoro2.F phoro3.F phospi.F photos.F photos_get.F \
photos_make.F photos_set.F photri.F photwo.F phtype.F

#CSRCS= geteni.c fchput.c fchtak.c dummies.c

#ifneq (,$(findstring macosx,$(ALICE_TARGET)))
#CSRCS+=lnblnk.c
#endif 

EINCLUDE:= 

#PACKFFLAGS := $(FFLAGS) -IMICROCERN/kerngen
PACKFFLAGS := $(FFLAGS) -IPYTHIA6  -L$(ALICE_ROOT)/lib/tgt_$(ALICE_TARGET) -lpythia6


#-*- Mode: Makefile -*-


ifndef PACKFFLAGS
photosFFLAGS:=$(FFLAGS)
else
photosFFLAGS:=$(PACKFFLAGS)
endif

ifndef PACKCFLAGS
photosCFLAGS:=$(CFLAGS)
else
photosCFLAGS:=$(PACKCFLAGS)
endif

ifndef PACKCXXFLAGS
photosCXXFLAGS:=$(CXXFLAGS)
else
photosCXXFLAGS:=$(PACKCXXFLAGS)
endif

ifndef PACKSOFLAGS
photosSOFLAGS:=$(SOFLAGS)
else
photosSOFLAGS:=$(PACKSOFLAGS)
endif

ifdef DYEXT
ifndef PACKDYFLAGS
photosDYFLAGS:=$(DYFLAGS)
else
photosDYFLAGS:=$(PACKDYFLAGS)
endif
endif

ifndef PACKLDFLAGS
photosLDFLAGS:=$(LDFLAGS)
else
photosLDFLAGS:=$(PACKLDFLAGS)
endif

ifndef PACKDCXXFLAGS
photosDCXXFLAGS:=$(CXXFLAGSNO)
else
photosDCXXFLAGS:=$(PACKDCXXFLAGS)
endif

ifndef PACKBLIBS
photosBLIBS:=$(LIBS)
else
photosBLIBS:=$(PACKBLIBS)
endif

WITHDICT=
ifneq ($(DHDR),)
WITHDICT=YES
else
ifneq ($(CINTAUTOLINK),)
WITHDICT=YES
endif
endif

# Headerfiles exported to common place:
photosEXPORT:=$(EXPORT)
photosEXPORTDEST:=$(patsubst %,$(EXPORTDIR)/%,$(EXPORT))


#Extra include,libs, defines etc.

photosDEFINE:=$(EDEFINE) -D_MODULE_=\"PHOTOS\"

photosINC:=$(patsubst %,-I%,$(EINCLUDE)) -IPHOTOS

photosELIBS:=$(patsubst %,-l%,$(ELIBS))
photosELIBSDEP:=$(patsubst %,lib/tgt_$(ALICE_TARGET)/lib%.$(SOEXT),$(ELIBS))
photosELIBSDIR:=$(patsubst %,-L%,$(ELIBSDIR))

#c sources and headers

photosCS:=$(patsubst %,$(MODDIR)/%,$(CSRCS))
photosCH:=$(patsubst %,$(MODDIR)/%,$(CHDRS))

#Fortran sources 
photosFS:=$(patsubst %,$(MODDIR)/%,$(FSRCS))

#c++ sources and header
photosS:=$(patsubst %,$(MODDIR)/%,$(SRCS))
photosH:=$(patsubst %,$(MODDIR)/%,$(HDRS)) $(EHDRS)

#############################################################################
#
#            If special rootcint headerfiles is specified use them
#                         else use all headers

ifndef CINTHDRS
photosCINTHDRS:=$(photosH)
else
photosCINTHDRS:=$(CINTHDRS:%=PHOTOS/%)
#photosCINTHDRS:=$(pathsubst %,PHOTOS/%,$(CINTHDRS))
endif
photosCINTCLASSES:=$(patsubst %.h,%,$(notdir $(photosCINTHDRS)))
#############################################################################

# Package Dictionary 
ifneq ($(DHDR),)
photosDH:=$(MODDIR)/$(DHDR)
else
photosDH:=
endif
ifneq ($(CINTAUTOLINK),)
photosDAL:=$(MODDIRO)/G__photosAutoLinkDef.h
photosDH+=$(photosDAL)
endif

#All objects
photosCXXO:=$(patsubst %,$(MODDIRO)/%, $(SRCS:.cxx=.o))
photosCO:=$(patsubst %,$(MODDIRO)/%, $(CSRCS:.c=.o))
photosSMALLFO:=$(patsubst %.f,$(MODDIRO)/%.o, $(filter %.f, $(FSRCS)))
photosCAPITFO:=$(patsubst %.F,$(MODDIRO)/%.o, $(filter %.F, $(FSRCS)))
photosFO:=$(photosSMALLFO) $(photosCAPITFO)
photosO:= $(photosCXXO) $(photosFO) $(photosCO)
photosCHV:=$(patsubst %,$(MODDIRC)/%, $(SRCS:.cxx=.viol))
photosSML:=$(sort $(patsubst %,$(MODDIRZ)/%, $(filter $(SRCS:.cxx=.smell),$(HDRS:.h=.smell))))


ifdef WITHDICT
  photosDS:=$(MODDIRO)/G__photos.cxx
  photosDO:=$(MODDIRO)/G__photos.o
  photosDDEP:=$(photosDO:.o=.d)
  photosDEP:=$(photosO:.o=.d) $(photosDDEP)
else
  photosDS:=
  photosDO:=
  photosDDEP:=
  photosDEP:=$(photosO:.o=.d)
endif


#The actual library file

photosLIB:=$(LIBPATH)/libphotos.$(SOEXT)

ifneq ($(DYEXT),)
photosDLIB:=$(LIBPATH)/libphotos.$(DYEXT)
endif

photosALIB:=$(LIBPATH)/libphotos.$(AEXT)

#Add this to the modules libs
ifeq ($(TYPE),lib)
PHOTOSLIBS += $(photosLIB)
PHOTOSALIBS += $(photosALIB)
ifneq ($(DYEXT),)
PHOTOSDLIBS += $(photosDLIB)
endif
endif

#The actual binary file

photosBIN:=$(BINPATH)/photos

#Add to modules list of binaries
PHOTOSBINS += $(photosBIN)

# Use in the main Makefile

ifeq ($(TYPE),lib)
ALLLIBS += $(photosLIB)
ALLALIBS += $(photosALIB)
ifneq ($(DYEXT),)
ALLLIBS += $(photosDLIB)
endif
BINLIBS += -lphotos
else
ALLEXECS += $(photosBIN)
endif

ifeq ($(DYEXT),)
photosLIB := $(photosLIB)
else
photosLIB := $(photosLIB)
endif

# include all dependence files
INCLUDEFILES +=$(photosDEP)

EXPORTFILES += $(photosEXPORTDEST)

#local rules

#The exportfiles only include if any!!

ifdef photosEXPORT
#$(photosEXPORTDEST): $(patsubst %,PHOTOS/%,$(photosEXPORT))

$(photosEXPORTDEST): $(EXPORTDIR)/%.h: PHOTOS/%.h
ifndef ALIQUIET
	  @echo "***** Copying file $^ to $@ *****"
endif
	  @[ -d $(dir $@) ] || mkdir -p $(dir $@)
	  @cp $^ $@	
endif

#------------------------------------------------------------------------

ifneq (,$(findstring macosx,$(ALICE_TARGET)))
$(photosLIB): $(photosDLIB) $(photosO) $(photosDO) PHOTOS/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  $(MUTE)rm -f $@; cd $(dir $@); ln -s $(notdir $(photosDLIB)) $(notdir $@)
else
$(photosLIB):$(photosO) $(photosDO) PHOTOS/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  \rm -f "$(CURDIR)"/$@ ;\
	  cd $(PHOTOSDIRO) ;\
	  $(SHLD) $(photosSOFLAGS) -o "$(CURDIR)"/$@ $(patsubst $(PHOTOSDIRO)/%,%,$(photosO) $(photosDO))  $(photosELIBSDIR) $(photosELIBS) $(SHLIB);\
	  chmod a-w "$(CURDIR)"/$@ ;\
	  cd $(ALICE_ROOT)
endif

ifneq ($(DYEXT),)
$(photosDLIB):$(photosO) $(photosDO) PHOTOS/module.mk
ifndef ALIQUIET
	  @echo "***** Linking library $@ *****"
endif
	  \rm -f "$(CURDIR)"/$@ ;\
	  cd $(PHOTOSDIRO) ;\
	  $(DYLD) $(photosDYFLAGS) -o "$(CURDIR)"/$@ $(patsubst $(PHOTOSDIRO)/%,%,$(photosO) $(photosDO))  $(photosELIBSDIR) $(photosELIBS) $(DYLIB);\
	  chmod a-w "$(CURDIR)"/$@ ;\
	  cd $(ALICE_ROOT) 
endif

#------------------------------------------------------------------------

$(photosALIB):$(photosO) $(photosDO) PHOTOS/module.mk
ifndef ALIQUIET
	  @echo "***** Linking static library $@ *****"
endif
	  \rm -f "$(CURDIR)"/$@ ;\
	  cd $(PHOTOSDIRO) ;\
	  $(ALLD) $(ALFLAGS) "$(CURDIR)"/$@ $(patsubst $(PHOTOSDIRO)/%,%,$(photosO) $(photosDO))  $(photosELIBSDIR) $(photosELIBS) $(ALLIB);\
          cd $(ALICE_ROOT)


$(photosBIN):$(photosO) $(photosDO) PHOTOS/module.mk
ifndef ALIQUIET
	  @echo "***** Making executable $@ *****"
endif
ifeq ($(ALIPROFILE),YES)
	$(MUTE)$(LD) $(photosLDFLAGS) $(photosO) $(ARLIBS) $(SHLIBS) $(photosBLIBS) $(EXEFLAGS) -o $@
else
	  $(MUTE)$(LD) $(photosLDFLAGS) $(photosO) $(photosDO) $(BINLIBDIRS) $(photosELIBSDIR) $(photosELIBS) $(photosBLIBS) $(EXEFLAGS) -o $@
endif

$(photosDAL): $(photosCINTHDRS) PHOTOS/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";
endif
	$(MUTE)echo '//automatically generated ROOT DICT definition' > $@
	$(MUTE)echo '//!!! DO NOT EDIT THIS FILE !!!' >> $@
	$(MUTE)echo '#ifdef __CINT__' >> $@
	$(MUTE)echo '#pragma link off all globals;' >> $@
	$(MUTE)echo '#pragma link off all classes;' >> $@
	$(MUTE)echo '#pragma link off all functions;' >> $@
	$(MUTE)$(foreach i, $(photosCINTCLASSES), \
	   echo "#pragma link C++ class $(i)+;" >> $@ ;)
	$(MUTE)echo '#endif' >> $@

$(photosDS): $(photosCINTHDRS) $(photosDH) PHOTOS/module.mk
ifndef ALIQUIET
	 @echo "***** Creating $@ *****";
endif
	 @(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	 @\rm -f $(patsubst %.cxx,%.d, $@)
	 $(MUTE)rootcint -f $@ -c $(photosDEFINE) $(CINTFLAGS) $(photosINC) $(photosCINTHDRS) $(photosDH)

$(photosDO): $(photosDS) 
ifndef ALIQUIET
		@echo "***** Compiling $< *****";
endif
		$(MUTE)$(CXX) $(photosDEFINE) -c $(photosINC)  -I$(ALICE_ROOT) $< -o $@ $(photosDCXXFLAGS)


#Different targets for the module

ifeq ($(TYPE),lib)
all-PHOTOS: $(photosLIB)
ifneq ($(DYEXT),)
all-PHOTOS: $(photosDLIB)
endif
else
all-PHOTOS: $(photosBIN)
endif


depend-photos: $(photosDEP)

# determination of object files
$(photosCXXO): $(MODDIRO)/%.o: $(MODDIR)/%.cxx $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CXX) $(photosDEFINE) -c $(photosINC)   $< -o $@ $(photosCXXFLAGS)

$(photosCAPITFO): $(MODDIRO)/%.o: $(MODDIR)/%.F $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(photosINC)  $< -o $@ $(photosFFLAGS)

$(photosSMALLFO): $(MODDIRO)/%.o: $(MODDIR)/%.f $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(F77) -c $(photosINC)  $< -o $@ $(photosFFLAGS)

$(photosCO): $(MODDIRO)/%.o: $(MODDIR)/%.c $(MODDIRO)/%.d 
ifndef ALIQUIET
	@echo "***** Compiling $< *****";
endif
	@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
	$(MUTE)$(CC) $(photosDEFINE) -c  $(photosINC)  $< -o $@   $(photosCFLAGS)

$(photosDDEP): $(photosDS)
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(photosELIBSDIR) $(photosINC) $(DEPINC)  $<" > $@

$(photosCXXO:.o=.d): $(MODDIRO)/%.d: $(MODDIRS)/%.cxx
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(photosDEFINE) $(photosELIBSDIR) $(photosINC) $(DEPINC)  $<" > $@

$(photosSMALLFO:.o=.d): $(MODDIRO)/%.d: $(MODDIRS)/%.f
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool dependF "$(photosELIBSDIR) $(photosINC) $(DEPINC)  $<" > $@

$(photosCAPITFO:.o=.d): $(MODDIRO)/%.d: $(MODDIRS)/%.F
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		$(MUTE)share/alibtool dependF "$(photosELIBSDIR) $(photosINC) $(DEPINC)  $<" > $@

$(photosCO:.o=.d): $(MODDIRO)/%.d: $(MODDIRS)/%.c
ifndef ALIQUIET
		@echo "***** Making dependences for $< *****";
endif
		@(if [ ! -d '$(dir $@)' ]; then echo "***** Making directory $(dir $@) *****"; mkdir -p $(dir $@); fi;)
		@share/alibtool depend "$(photosDEFINE) $(photosELIBSDIR) $(photosINC) $(DEPINC) $<" > $@

.PRECIOUS: $(patsubst %.cxx,$(MODDIRO)/%.d,$(SRCS))
.PRECIOUS: $(patsubst %.c,$(MODDIRO)/%.d,$(CSRCS))
.PRECIOUS: $(patsubst %.F,$(MODDIRO)/%.d,$(patsubst %.f,$(MODDIRO)/%.d,$(FSRCS)))

check-PHOTOS: $(photosCHV)

# IRST coding rule check 
$(photosCHV:.viol=.i): $(MODDIRC)/%.i: $(MODDIR)/%.cxx $(MODDIRO)/%.d
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)$(CXX) -E $(photosDEFINE) $(photosINC) -I. $< > $@ $(photosCXXFLAGS)
	@cd $(dir $@) ; $(IRST_INSTALLDIR)/patch/patch4alice.prl $(notdir $@)

# IRST coding rule check
$(photosCHV): $(MODDIRC)/%.viol: $(MODDIRC)/%.i
	$(MUTE)echo $@ ; $(CODE_CHECK) $< $(shell echo $(dir $<) | sed -e 's:/check::') > $@

.SECONDARY: $(photosCHV:.viol=.i) $(photosCHI:.viol=.ii)

PACKREVENG += $(photosCHV:.viol=.ii)

# IRST code smell checker

smell-PHOTOS: $(photosSML)

$(photosSML:.smell=_cxx.ml) : $(MODDIRZ)/%_cxx.ml : $(MODDIR)/%.cxx
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)src2srcml $< $@

$(photosSML:.smell=_h.ml) : $(MODDIRZ)/%_h.ml : $(MODDIR)/%.h
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	$(MUTE)src2srcml $< $@

$(photosSML) : $(MODDIRZ)/%.smell : $(MODDIRZ)/%_cxx.ml $(MODDIRZ)/%_h.ml
	$(MUTE)echo smelling $@
	$(MUTE)java -classpath $(SMELL_DETECTOR_DIR):$(SMELL_DETECTOR_DIR)/xom-1.1.jar -Xmx500m SmellDetector $^ > $@
	$(MUTE)[ -s $@ ] || touch $@

.SECONDARY: $(photosSML:.smell=_cxx.ml) $(photosSML:.smell=_h.ml)

# targets to create .par archives (jgrosseo)
photos.par: $(patsubst %,PHOTOS/photos/%,$(filter-out dict.%, $(HDRS) $(SRCS) $(DHDR) $(PKGFILE) $(FSRCS) Makefile Makefile.arch libphotos.pkg PROOF-INF))
	@echo "Creating archive" $@ ...
	@cd PHOTOS; (tar cfzh ../$@ photos 2> /dev/null && echo "package" $@ "created in" $(PWD)/$@) || (tar cfzh /tmp/$@ photos 2> /dev/null && echo "package" $@ "created in /tmp/"$@)
	@rm -rf PHOTOS/photos

PHOTOS/photos/Makefile: PHOTOS/Makefile
	@echo Copying $< to $@ with transformations
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@sed 's/include \$$(ROOTSYS)\/test\/Makefile.arch/include Makefile.arch/; s/PACKAGE = .*/PACKAGE = photos/' < $^ > $@

PHOTOS/photos/Makefile.arch: $(ROOTSYS)/test/Makefile.arch
	@echo Copying $< to $@
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@cp -pR $^ $@

PHOTOS/photos/PROOF-INF: PHOTOS/PROOF-INF.photos
	@echo Copying $< to $@
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@cp -pR $^ $@

PHOTOS/photos/%: PHOTOS/%
	@echo Copying $< to $@
	@[ -d $(dir $@) ] || mkdir -p $(dir $@)
	@cp -pR $< $@

test-photos.par: photos.par
	@echo "INFO: The file $< is now tested, in case of an error check in par-tmp/photos."
	@mkdir -p par-tmp
	@cd par-tmp; tar xfz ../$<;	cd $(subst .par,,$<); PROOF-INF/BUILD.sh
	@rm -rf par-tmp/photos
	@echo "INFO: Testing succeeded (already cleaned up)"
#-*- Mode: Makefile -*-


reveng-PHOTOS:		PHOTOS/check/classDiagram.dot

PHOTOS/check/classDiagram.dot:	$(PACKREVENG)
	@$(REV_ENG) $^
	@-mv classDiagram.dot $@

revdisp-PHOTOS:	reveng-PHOTOS
	@echo revdisp for PHOTOS
	@cd PHOTOS/check ; \
      $(IRST_INSTALLDIR)/webreveng/create-class-diagram-pages.sh
	@sed -e "s/STEER/PHOTOS/g" < $(IRST_INSTALLDIR)/webreveng/WWW/STEER/HomePage.html > PHOTOS/check/HomePage.html

PACKREVENG =

#  Clean option for the whole module
clean-PHOTOS:
ifndef ALIQUIET
		@echo "***** Cleaning PHOTOS *****"
endif
		$(MUTE)rm PHOTOS/module.mk
		$(MUTE)rm -rf PHOTOS/tgt_$(ALICE_TARGET) 
		$(MUTE)rm -f $(PHOTOSLIBS)
		$(MUTE)rm -f $(PHOTOSBINS)

clean-check-PHOTOS:
ifndef ALIQUIET
		@echo "***** Cleaning code check for PHOTOS *****"
endif
		$(MUTE)rm -f `find PHOTOS/check -name '*.i'` `find PHOTOS/check -name '*.ii'` `find PHOTOS/check -name '*.viol'`

clean-smell-PHOTOS:
ifndef ALIQUIET
		@echo "***** Cleaning code smell for PHOTOS *****"
endif
		$(MUTE)rm -f `find PHOTOS/check -name '*.ml'` `find PHOTOS/check -name '*.smell'`

clean-reveng-PHOTOS:
ifndef ALIQUIET
		@echo "***** Cleaning reverse engineering files for PHOTOS *****"
endif
		$(MUTE)rm -f `find PHOTOS/check -name '*.dot'`

