/**************************************************************************
 * Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
 *                                                                        *
 * Author: The ALICE Off-line Project.                                    *
 * Contributors are mentioned in the code where appropriate.              *
 *                                                                        *
 * Permission to use, copy, modify and distribute this software and its   *
 * documentation strictly for non-commercial purposes is hereby granted   *
 * without fee, provided that the above copyright notice appears in all   *
 * copies and that both the copyright notice and this permission notice   *
 * appear in the supporting documentation. The authors make no claims     *
 * about the suitability of this software for any purpose. It is          *
 * provided "as is" without express or implied warranty.                  *
 **************************************************************************/

/* $Id: AliTRDgtuParam.cxx 28397 2008-09-02 09:33:00Z cblume $ */

////////////////////////////////////////////////////////////////////////////
//                                                                        //
//  Parameters for GTU simulation                                         //
//                                                                        //
//  Author: J. Klein (Jochen.Klein@cern.ch)                               //
//                                                                        //
////////////////////////////////////////////////////////////////////////////

#include <limits>

#include "TROOT.h"
#include "TMath.h"
#include "TMatrix.h"
#include "TDecompLU.h"
#include "TGraphAsymmErrors.h"
#include "TCanvas.h"

#include "AliLog.h"
#include "AliTRDgtuParam.h"
#include "AliTRDgeometry.h"
#include "AliTRDpadPlane.h"

ClassImp(AliTRDgtuParam)

Bool_t AliTRDgtuParam::fgUseGTUconst = kTRUE;
Bool_t AliTRDgtuParam::fgUseGTUmerge = kTRUE;
Bool_t AliTRDgtuParam::fgLimitNoTracklets = kTRUE;
Int_t  AliTRDgtuParam::fgMaxNoTracklets = 62;

// ----- matching windows -----
      Int_t     AliTRDgtuParam::fgDeltaY     = 19;
      Int_t     AliTRDgtuParam::fgDeltaAlpha = 21;
// ----- reference layers -----
      Int_t     AliTRDgtuParam::fgRefLayers[] = { 3, 2, 1 };

// ----- Bin widths (granularity) -----
const Float_t 	AliTRDgtuParam::fgkBinWidthY  = 160e-4;
const Float_t 	AliTRDgtuParam::fgkBinWidthdY = 140e-4;

// ----- Bit widths (used for internal representation) -----
const Int_t 	AliTRDgtuParam::fgkBitWidthY      = 13;
const Int_t 	AliTRDgtuParam::fgkBitWidthdY     = 7;
const Int_t 	AliTRDgtuParam::fgkBitWidthYProj  = 10;
const Int_t 	AliTRDgtuParam::fgkBitExcessY 	  = 4;
const Int_t 	AliTRDgtuParam::fgkBitExcessAlpha = 10;
const Int_t 	AliTRDgtuParam::fgkBitExcessYProj = 2;

// pt higher than the one for smallest possible a != 0
const Int_t    AliTRDgtuParam::fgkPtInfinity      = std::numeric_limits<Int_t>::max();

// ---- conversion rejection via sagitta method -----
      Float_t   AliTRDgtuParam::fgInvPtDevCut   = .262144;
      Float_t   AliTRDgtuParam::fgLayerInvXpos[6] = {0.0033335557, 0.00319918101, 0.003075219878, 0.002960506839, 0.002854044181, 0.002754972726};
      Float_t   AliTRDgtuParam::fgLayerXpos[6]    = {299.98      , 312.58       , 325.18        , 337.78        , 350.38        , 362.98};
      Int_t     AliTRDgtuParam::fgShiftLengthNorm = 1e6;
      Int_t     AliTRDgtuParam::fgCorrectionMode = 0;
      Bool_t    AliTRDgtuParam::fgWriteSagittaOutputToTrackWordBC = kFALSE;

// ----- geometry constants used in GTU -----
const Bool_t    AliTRDgtuParam::fgZChannelMap[5][16][6][16] = {

{  /* --- Stack 0 --- */

/*  . x x . . . . . . . . . . . . .  */
/*  x . . . . . . . . . . . . . . .  */
/*  X . . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x . . . . . . . . . . . . . . .  */

{{0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . x x . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  . X . . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */

{{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . x x . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */
/*  . . X . . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */

{{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . x x . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */
/*  . . . X . . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */

{{0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . x x . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */
/*  . . . . X . . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */

{{0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . x x . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . . X . . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . . X . . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . x x x . . . . . . .  */
/*  . . . . . . . X . . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . x x x . . . . .  */
/*  . . . . . . . x x x . . . . . .  */
/*  . . . . . . . . X . . . . . . .  */
/*  . . . . . . . x x x . . . . . .  */
/*  . . . . . . . x x x . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . x x x . . . .  */
/*  . . . . . . . . x x x . . . . .  */
/*  . . . . . . . . . X . . . . . .  */
/*  . . . . . . . . x x x . . . . .  */
/*  . . . . . . . . x x x . . . . .  */
/*  . . . . . . . . x x . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . x x x . . . .  */
/*  . . . . . . . . . . X . . . . .  */
/*  . . . . . . . . . x x x . . . .  */
/*  . . . . . . . . . x x x . . . .  */
/*  . . . . . . . . . x x . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . . X . . . .  */
/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . x x . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}},

/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . . X . . .  */
/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . x x . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}},

/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . . X . .  */
/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . x x . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0}},

/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . . X .  */
/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . x x .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0}},

/*  . . . . . . . . . . . . . . . x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . . X  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}}},

{  /* --- Stack 1 --- */

/*  x x x . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  X . . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x . . . . . . . . . . . . . . .  */

{{1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . x x x . . . . . . . . . . . .  */
/*  x x x . . . . . . . . . . . . .  */
/*  . X . . . . . . . . . . . . . .  */
/*  x x x . . . . . . . . . . . . .  */
/*  x x x . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */

{{0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . x x x . . . . . . . . . . .  */
/*  . x x x . . . . . . . . . . . .  */
/*  . . X . . . . . . . . . . . . .  */
/*  . x x x . . . . . . . . . . . .  */
/*  . x x x . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */

{{0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . x x x . . . . . . . . . .  */
/*  . . x x x . . . . . . . . . . .  */
/*  . . . X . . . . . . . . . . . .  */
/*  . . x x x . . . . . . . . . . .  */
/*  . . x x x . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */

{{0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . x x x . . . . . . . . .  */
/*  . . . x x x . . . . . . . . . .  */
/*  . . . . X . . . . . . . . . . .  */
/*  . . . x x x . . . . . . . . . .  */
/*  . . . x x x . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */

{{0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . x x x . . . . . . . .  */
/*  . . . . x x x . . . . . . . . .  */
/*  . . . . . X . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */

{{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . x x x . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . X . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . X . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . X . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . X . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . X . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . x x . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . X . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . x x . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}},

/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . X . . .  */
/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . x x . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}},

/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . X . .  */
/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . x x . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0}},

/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . X .  */
/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . x x .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0}},

/*  . . . . . . . . . . . . . . . x  */
/*  . . . . . . . . . . . . . . . x  */
/*  . . . . . . . . . . . . . . . X  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}}},

{  /* --- Stack 2 --- */

/*  x x . . . . . . . . . .          */
/*  x x . . . . . . . . . .          */
/*  X . . . . . . . . . . .          */
/*  x . . . . . . . . . . .          */
/*  x . . . . . . . . . . .          */
/*  x . . . . . . . . . . .          */

{{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . x x . . . . . . . . .          */
/*  . x x . . . . . . . . .          */
/*  . X . . . . . . . . . .          */
/*  x x . . . . . . . . . .          */
/*  x x . . . . . . . . . .          */
/*  x x . . . . . . . . . .          */

{{0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . x x . . . . . . . .          */
/*  . . x x . . . . . . . .          */
/*  . . X . . . . . . . . .          */
/*  . x x . . . . . . . . .          */
/*  . x x . . . . . . . . .          */
/*  . x x . . . . . . . . .          */

{{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . x x . . . . . . .          */
/*  . . . x x . . . . . . .          */
/*  . . . X . . . . . . . .          */
/*  . . x x x . . . . . . .          */
/*  . . x x x . . . . . . .          */
/*  . . x x x . . . . . . .          */

{{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . x x x . . . . . .          */
/*  . . . x x x . . . . . .          */
/*  . . . . X . . . . . . .          */
/*  . . . x x x . . . . . .          */
/*  . . . x x x . . . . . .          */
/*  . . . x x x . . . . . .          */

{{0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . x x x . . . . .          */
/*  . . . . x x x . . . . .          */
/*  . . . . . X . . . . . .          */
/*  . . . . x x x . . . . .          */
/*  . . . . x x x . . . . .          */
/*  . . . . x x x . . . . .          */

{{0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . x x x . . . .          */
/*  . . . . . x x x . . . .          */
/*  . . . . . . X . . . . .          */
/*  . . . . . x x x . . . .          */
/*  . . . . . x x x . . . .          */
/*  . . . . . x x x . . . .          */

{{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . x x x . . .          */
/*  . . . . . . x x x . . .          */
/*  . . . . . . . X . . . .          */
/*  . . . . . . x x x . . .          */
/*  . . . . . . x x x . . .          */
/*  . . . . . . x x x . . .          */

{{0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . x x . . .          */
/*  . . . . . . . x x . . .          */
/*  . . . . . . . . X . . .          */
/*  . . . . . . . x x x . .          */
/*  . . . . . . . x x x . .          */
/*  . . . . . . . x x x . .          */

{{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . x x . .          */
/*  . . . . . . . . x x . .          */
/*  . . . . . . . . . X . .          */
/*  . . . . . . . . . x x .          */
/*  . . . . . . . . . x x .          */
/*  . . . . . . . . . x x .          */

{{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . x x .          */
/*  . . . . . . . . . x x .          */
/*  . . . . . . . . . . X .          */
/*  . . . . . . . . . . x x          */
/*  . . . . . . . . . . x x          */
/*  . . . . . . . . . . x x          */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}},

/*  . . . . . . . . . . x x          */
/*  . . . . . . . . . . x x          */
/*  . . . . . . . . . . . X          */
/*  . . . . . . . . . . . x          */
/*  . . . . . . . . . . . x          */
/*  . . . . . . . . . . . x          */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}},

/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */
/*  . . . . . . . . . . . .          */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}},

{  /* --- Stack 3 --- */

/*  x . . . . . . . . . . . . . . .  */
/*  x . . . . . . . . . . . . . . .  */
/*  X . . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */

{{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  . X . . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */

{{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . x x . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */
/*  . . X . . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */

{{0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . x x . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */
/*  . . . X . . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */

{{0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . x x . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */
/*  . . . . X . . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */

{{0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */
/*  . . . . . X . . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */

{{0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */
/*  . . . . . . X . . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */

{{0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . . X . . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */

{{0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . . X . . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . x x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . . X . . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . x x . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}},

/*  . . . . . . . . x x x . . . . .  */
/*  . . . . . . . . . x x x . . . .  */
/*  . . . . . . . . . . X . . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . x x . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}},

/*  . . . . . . . . . x x x . . . .  */
/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . . X . . . .  */
/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . . x x . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}},

/*  . . . . . . . . . . x x x . . .  */
/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . . X . . .  */
/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . . x x . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0}},

/*  . . . . . . . . . . . x x x . .  */
/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . . X . .  */
/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . . x x .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0}},

/*  . . . . . . . . . . . . x x x .  */
/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . . X .  */
/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . . x x  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}},

/*  . . . . . . . . . . . . . x x x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . . X  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . . x  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}},

{  /* --- Stack 4 --- */

/*  x . . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  X . . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */
/*  x x . . . . . . . . . . . . . .  */

{{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  x x . . . . . . . . . . . . . .  */
/*  x x x . . . . . . . . . . . . .  */
/*  . X . . . . . . . . . . . . . .  */
/*  x x x . . . . . . . . . . . . .  */
/*  x x x . . . . . . . . . . . . .  */
/*  . x x . . . . . . . . . . . . .  */

{{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  x x x . . . . . . . . . . . . .  */
/*  . x x x . . . . . . . . . . . .  */
/*  . . X . . . . . . . . . . . . .  */
/*  . x x x . . . . . . . . . . . .  */
/*  . x x x . . . . . . . . . . . .  */
/*  . . x x . . . . . . . . . . . .  */

{{1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . x x x . . . . . . . . . . . .  */
/*  . . x x x . . . . . . . . . . .  */
/*  . . . X . . . . . . . . . . . .  */
/*  . . x x x . . . . . . . . . . .  */
/*  . . x x x . . . . . . . . . . .  */
/*  . . . x x . . . . . . . . . . .  */

{{0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . x x x . . . . . . . . . . .  */
/*  . . . x x x . . . . . . . . . .  */
/*  . . . . X . . . . . . . . . . .  */
/*  . . . x x x . . . . . . . . . .  */
/*  . . . x x x . . . . . . . . . .  */
/*  . . . . x x . . . . . . . . . .  */

{{0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . x x x . . . . . . . . . .  */
/*  . . . . x x x . . . . . . . . .  */
/*  . . . . . X . . . . . . . . . .  */
/*  . . . . x x x . . . . . . . . .  */
/*  . . . . x x x . . . . . . . . .  */
/*  . . . . . x x . . . . . . . . .  */

{{0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . x x x . . . . . . . . .  */
/*  . . . . . x x x . . . . . . . .  */
/*  . . . . . . X . . . . . . . . .  */
/*  . . . . . x x x . . . . . . . .  */
/*  . . . . . x x x . . . . . . . .  */
/*  . . . . . . x x . . . . . . . .  */

{{0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . x x x . . . . . . . .  */
/*  . . . . . . x x x . . . . . . .  */
/*  . . . . . . . X . . . . . . . .  */
/*  . . . . . . x x x . . . . . . .  */
/*  . . . . . . x x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */

{{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . x x . . . . . . . .  */
/*  . . . . . . . x x x . . . . . .  */
/*  . . . . . . . . X . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */

{{0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0}},

/*  . . . . . . . x x . . . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . X . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . . x x . . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0}},

/*  . . . . . . . . x x . . . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . X . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . . x x . . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}},

/*  . . . . . . . . . x x . . . . .  */
/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . X . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . . x x . . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0}},

/*  . . . . . . . . . . x x . . . .  */
/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . X . . .  */
/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . . x x . .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0}},

/*  . . . . . . . . . . . x x . . .  */
/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . X . .  */
/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . . x x .  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0}},

/*  . . . . . . . . . . . . x x . .  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . X .  */
/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . . x x  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1}},

/*  . . . . . . . . . . . . . x x .  */
/*  . . . . . . . . . . . . . . . x  */
/*  . . . . . . . . . . . . . . . X  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . x x  */
/*  . . . . . . . . . . . . . . . x  */

{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}}}

};
const Float_t   AliTRDgtuParam::fgkRadius[6] = { 300.65, 313.25, 325.85, 338.45, 351.05, 363.65 };
const Float_t   AliTRDgtuParam::fgkThickness = 3.;
const Float_t   AliTRDgtuParam::fgkRow0Pos[6][5] = {
  {301, 177, 53, -57, -181},
  {301, 177, 53, -57, -181},
  {315, 184, 53, -57, -188},
  {329, 191, 53, -57, -195},
  {343, 198, 53, -57, -202},
  {347, 200, 53, -57, -204}
};
const Float_t   AliTRDgtuParam::fgkInnerPadLength[] = {7.5, 7.5, 8.0, 8.5, 9.0, 9.0};
const Float_t   AliTRDgtuParam::fgkOuterPadLength[] = {7.5, 7.5, 7.5, 7.5, 7.5, 8.5};
const Float_t   AliTRDgtuParam::fgkAcoeff[32][6] = {
  {-3440, -3303,  3174,  3057,     0,     0},
  {-3481,     0,  -171,     0,  3140,     0},
  {-2850, -1380,     0,  1277,  2441,     0},
  {-3481,     0,  -171,     0,  3140,     0},
  {    0, -3568, -3431,  3303,  3185,     0},
  {-2783, -1378,  -136,  1275,  2510,     0},
  {-1500, -2857,  1384,     0,     0,  2461},
  {    0, -3609,     0,  -171,     0,  3268},
  {-3685,     0,  3400, -3276,     0,  3049},
  {    0, -3609,     0,  -171,     0,  3268},
  {-1498, -2792,  1382,  -132,     0,  2528},
  {-1850, -1777,     0,     0,  1585,  1531},
  {-3481,     0,  -171,     0,  3140,     0},
  {    0, -2953, -1431,     0,  1328,  2544},
  {-1808, -1776,   -89,     0,  1631,  1530},
  {-2932,     0,     0, -1314,  2511,  1223},
  {    0, -3609,     0,  -171,     0,  3268},
  {-1849, -1738,     0,   -82,  1583,  1574},
  {    0,     0, -3696, -3559,  3431,  3313},
  {-2863,     0,  -140, -1312,  2582,  1221},
  {    0, -2886, -1429,  -136,  1327,  2613},
  {-1806, -1736,   -89,   -82,  1629,  1572},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1},
  {   -1,    -1,    -1,    -1,    -1,    -1}
};
const Float_t    AliTRDgtuParam::fgkZposLookupTable[5][6][16] = {
{{297.25 ,289.75 ,282.25 ,274.75 ,267.25 ,259.75 ,252.25 ,244.75 ,237.25 ,229.75 ,222.25 ,214.75 ,207.25 ,199.75 ,192.25 ,184.75},
 {297.25 ,289.75 ,282.25 ,274.75 ,267.25 ,259.75 ,252.25 ,244.75 ,237.25 ,229.75 ,222.25 ,214.75 ,207.25 ,199.75 ,192.25 ,184.75},
 {311.25 ,303.5  ,295.5  ,287.5  ,279.5  ,271.5  ,263.5  ,255.5  ,247.5  ,239.5  ,231.5  ,223.5  ,215.5  ,207.5  ,199.5  ,191.75},
 {325.25 ,317.25 ,308.75 ,300.25 ,291.75 ,283.25 ,274.75 ,266.25 ,257.75 ,249.25 ,240.75 ,232.25 ,223.75 ,215.25 ,206.75 ,198.75},
 {339.25 ,331    ,322    ,313    ,304    ,295    ,286    ,277    ,268    ,259    ,250    ,241    ,232    ,223    ,214    ,205.75},
 {342.75 ,334    ,325    ,316    ,307    ,298    ,289    ,280    ,271    ,262    ,253    ,244    ,235    ,226    ,217    ,208.25}},

{{173.25 ,165.75 ,158.25 ,150.75 ,143.25 ,135.75 ,128.25 ,120.75 ,113.25 ,105.75 ,98.25  ,90.75  ,83.25  ,75.75  ,68.25  ,60.75},
 {173.25 ,165.75 ,158.25 ,150.75 ,143.25 ,135.75 ,128.25 ,120.75 ,113.25 ,105.75 ,98.25  ,90.75  ,83.25  ,75.75  ,68.25  ,60.75},
 {180.25 ,172.5  ,164.5  ,156.5  ,148.5  ,140.5  ,132.5  ,124.5  ,116.5  ,108.5  ,100.5  ,92.5   ,84.5   ,76.5   ,68.5   ,60.75},
 {187.25 ,179.25 ,170.75 ,162.25 ,153.75 ,145.25 ,136.75 ,128.25 ,119.75 ,111.25 ,102.75 ,94.25  ,85.75  ,77.25  ,68.75  ,60.75},
 {194.25 ,186    ,177    ,168    ,159    ,150    ,141    ,132    ,123    ,114    ,105    ,96     ,87     ,78     ,69     ,60.75},
 {195.75 ,187    ,178    ,169    ,160    ,151    ,142    ,133    ,124    ,115    ,106    ,97     ,88     ,79     ,70     ,61.25}},

{{49 ,40.5 ,31.5 ,22.5 ,13.5 ,4.5 ,-4.5 ,-13.5 ,-22.5 ,-31.5 ,-40.5 ,-49 ,9999 ,9999 ,9999 ,9999},
 {49 ,40.5 ,31.5 ,22.5 ,13.5 ,4.5 ,-4.5 ,-13.5 ,-22.5 ,-31.5 ,-40.5 ,-49 ,9999 ,9999 ,9999 ,9999},
 {49 ,40.5 ,31.5 ,22.5 ,13.5 ,4.5 ,-4.5 ,-13.5 ,-22.5 ,-31.5 ,-40.5 ,-49 ,9999 ,9999 ,9999 ,9999},
 {49 ,40.5 ,31.5 ,22.5 ,13.5 ,4.5 ,-4.5 ,-13.5 ,-22.5 ,-31.5 ,-40.5 ,-49 ,9999 ,9999 ,9999 ,9999},
 {49 ,40.5 ,31.5 ,22.5 ,13.5 ,4.5 ,-4.5 ,-13.5 ,-22.5 ,-31.5 ,-40.5 ,-49 ,9999 ,9999 ,9999 ,9999},
 {49 ,40.5 ,31.5 ,22.5 ,13.5 ,4.5 ,-4.5 ,-13.5 ,-22.5 ,-31.5 ,-40.5 ,-49 ,9999 ,9999 ,9999 ,9999}},

{{-60.75 ,-68.25 ,-75.75 ,-83.25 ,-90.75 ,-98.25  ,-105.75 ,-113.25 ,-120.75 ,-128.25 ,-135.75 ,-143.25 ,-150.75 ,-158.25 ,-165.75 ,-173.25},
 {-60.75 ,-68.25 ,-75.75 ,-83.25 ,-90.75 ,-98.25  ,-105.75 ,-113.25 ,-120.75 ,-128.25 ,-135.75 ,-143.25 ,-150.75 ,-158.25 ,-165.75 ,-173.25},
 {-60.75 ,-68.5  ,-76.5  ,-84.5  ,-92.5  ,-100.5  ,-108.5  ,-116.5  ,-124.5  ,-132.5  ,-140.5  ,-148.5  ,-156.5  ,-164.5  ,-172.5  ,-180.25},
 {-60.75 ,-68.75 ,-77.25 ,-85.75 ,-94.25 ,-102.75 ,-111.25 ,-119.75 ,-128.25 ,-136.75 ,-145.25 ,-153.75 ,-162.25 ,-170.75 ,-179.25 ,-187.25},
 {-60.75 ,-69    ,-78    ,-87    ,-96    ,-105    ,-114    ,-123    ,-132    ,-141    ,-150    ,-159    ,-168    ,-177    ,-186    ,-194.25},
 {-61.25 ,-70    ,-79    ,-88    ,-97    ,-106    ,-115    ,-124    ,-133    ,-142    ,-151    ,-160    ,-169    ,-178    ,-187    ,-195.75}},

{{-184.75  ,-192.25 ,-199.75 ,-207.25 ,-214.75 ,-222.25 ,-229.75 ,-237.25 ,-244.75 ,-252.25 ,-259.75 ,-267.25 ,-274.75 ,-282.25 ,-289.75 ,-297.25},
 {-184.75  ,-192.25 ,-199.75 ,-207.25 ,-214.75 ,-222.25 ,-229.75 ,-237.25 ,-244.75 ,-252.25 ,-259.75 ,-267.25 ,-274.75 ,-282.25 ,-289.75 ,-297.25},
 {-191.75  ,-199.5  ,-207.5  ,-215.5  ,-223.5  ,-231.5  ,-239.5  ,-247.5  ,-255.5  ,-263.5  ,-271.5  ,-279.5  ,-287.5  ,-295.5  ,-303.5  ,-311.25},
 {-198.75  ,-206.75 ,-215.25 ,-223.75 ,-232.25 ,-240.75 ,-249.25 ,-257.75 ,-266.25 ,-274.75 ,-283.25 ,-291.75 ,-300.25 ,-308.75 ,-317.25 ,-325.25},
 {-205.75  ,-214    ,-223    ,-232    ,-241    ,-250    ,-259    ,-268    ,-277    ,-286    ,-295    ,-304    ,-313    ,-322    ,-331    ,-339.25},
 {-208.25  ,-217    ,-226    ,-235    ,-244    ,-253    ,-262    ,-271    ,-280    ,-289    ,-298    ,-307    ,-316    ,-325    ,-334    ,-342.75}
}};
const Int_t     AliTRDgtuParam::fgkMaskID[] = {
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,
  -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  2, -1,  3,  4,  5,
  -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1,  7, -1,  8,  9, 10,
  -1, -1, -1, 11, -1, 12, 13, 14, -1, 15, 16, 17, 18, 19, 20, 21
};

AliTRDgtuParam::AliTRDgtuParam() :
  fVertexSize(20.0),
  fCurrTrackletMask(0),
  fMagField(0.5),
  fGeo(0x0)
{
  // default ctor
  fGeo = new AliTRDgeometry();
  for (Int_t iLayer = 0; iLayer < 6; iLayer++) {
    fAki[iLayer] = 0.;
    fBki[iLayer] = 0.;
    fCki[iLayer] = 0.;
    fPki[iLayer] = 0;
  }
  fLengthNorm = 0;
  fc1Inv = 0;
  GenerateZChannelMap();
}

AliTRDgtuParam::~AliTRDgtuParam()
{
  // dtor

  delete fGeo;
}

AliTRDgtuParam* AliTRDgtuParam::Instance()
{
  // get (or create) the single instance

  static AliTRDgtuParam instance;
  return &instance;
}

Bool_t AliTRDgtuParam::IsInZChannel(Int_t stack, Int_t layer, Int_t zchannel, Int_t zpos) const
{
  return (fZSubChannel[stack][zchannel][layer][zpos] != 0);
}

Int_t AliTRDgtuParam::GetZSubchannel(Int_t stack, Int_t layer, Int_t zchannel, Int_t zpos) const
{
  return fZSubChannel[stack][zchannel][layer][zpos];
}

Int_t AliTRDgtuParam::GetRefLayer(Int_t refLayerIdx)
{
  // returns the reference layer indexed by refLayerIdx

  if (refLayerIdx >= 0 && refLayerIdx < fgkNRefLayers)
    return fgRefLayers[refLayerIdx];
  else
    return -1;
}

Int_t AliTRDgtuParam::GenerateZChannelMap()
{
  // generate the z-channel map
  // assuming that the tracks come from the vertex
  // +/- fVertexSize in z-direction

  if (fgUseGTUconst) {
    for (Int_t iStack = 0; iStack < fGeo->Nstack(); iStack++) {
      for (Int_t iChannel = 0; iChannel < fGeo->GetRowMax(fgkFixLayer, iStack, 0); iChannel++) {
	for (Int_t iLayer = 0; iLayer < fGeo->Nlayer(); iLayer++) {
	  for (Int_t iRow = 0; iRow < fGeo->GetRowMax(iLayer, iStack, 0); iRow++) {
	    if (fgZChannelMap[iStack][iChannel][iLayer][iRow] != 0) {
	      fZChannelMap[iStack][iChannel][iLayer][iRow] = 1;
	      fZSubChannel[iStack][iChannel % fgkNZChannels][iLayer][iRow] = iChannel / fgkNZChannels + 1;
	    }
	  }
	}
      }
    }

    return kTRUE;
  }
  else {
    Int_t iSec = 0; // sector is irrelevant
    Bool_t collision = kFALSE;

    for (Int_t iStack = 0; iStack < fGeo->Nstack(); iStack++) {

      Float_t x[6] = { 0 };
      Float_t z[6][16] = {{ 0 }};
      Float_t dZ[6][16] = {{ 0 }};

      for (Int_t iLayer = 0; iLayer < fGeo->Nlayer(); iLayer++) {
	AliTRDpadPlane *pp = fGeo->GetPadPlane(iLayer, iStack);
	x[iLayer]  = fGeo->GetTime0(iLayer) - fGeo->CdrHght(); // ???
	for (Int_t iRow = 0; iRow < fGeo->GetRowMax(iLayer, iStack, iSec); iRow++) {
	  z[iLayer][iRow]  = pp->GetRowPos(iRow); // this is the right (pos. z-direction) border of the pad
	  dZ[iLayer][iRow] = pp->GetRowSize(iRow); // length of the pad in z-direction
	  for (Int_t i = 0; i < fgkNZChannels; i++)
	    fZSubChannel[iStack][i][iLayer][iRow] = 0;
	}
      }

      for (Int_t fixRow = 0; fixRow < fGeo->GetRowMax(fgkFixLayer, iStack, iSec); fixRow++) {

	Double_t fixZmin = z[fgkFixLayer][fixRow] - dZ[fgkFixLayer][fixRow];
	Double_t fixZmax = z[fgkFixLayer][fixRow];
	Double_t fixX    = x[fgkFixLayer] + 1.5; // ??? 1.5 from where?

	for (Int_t iLayer = 0; iLayer < fGeo->Nlayer(); iLayer++) {
	  Double_t leftZ, rightZ;

	  if (iLayer <= fgkFixLayer) {
	    leftZ  = (fixZmin + fVertexSize) * (x[iLayer] + 1.5) / fixX - fVertexSize;
	    rightZ = (fixZmax - fVertexSize) * (x[iLayer] + 1.5) / fixX + fVertexSize;
	  }
	  else {
	    leftZ  = (fixZmin - fVertexSize) * (x[iLayer] + 1.5) / fixX + fVertexSize;
	    rightZ = (fixZmax + fVertexSize) * (x[iLayer] + 1.5) / fixX - fVertexSize;
	  }

	  Double_t epsilon = 0.001;
	  for (Int_t iRow = 0; iRow < fGeo->GetRowMax(iLayer, iStack, iSec); iRow++) {
	    if ( (z[iLayer][iRow] )                    > (leftZ  + epsilon) &&
		 (z[iLayer][iRow] - dZ[iLayer][iRow] ) < (rightZ - epsilon) ) {
	      fZChannelMap[iStack][fixRow][iLayer][iRow] = 1;
	      if (fZSubChannel[iStack][fixRow % fgkNZChannels][iLayer][iRow] != 0) {
		AliError("Collision in Z-Channel assignment occured! No reliable tracking!!!");
		collision = kTRUE;
	      }
	      else
		fZSubChannel[iStack][fixRow % fgkNZChannels][iLayer][iRow] = fixRow / fgkNZChannels + 1;
	    }

	  }
	}
      }
    }

    return ~collision;
  }
}

Bool_t AliTRDgtuParam::DisplayZChannelMap(Int_t zchannel, Int_t subchannel) const
{
  // display the z-channel map

  if (zchannel >= fgkNZChannels) {
    AliError("Invalid Z channel!");
    return kFALSE;
  }

  Int_t zchmin = zchannel >= 0 ? zchannel : 0;
  Int_t zchmax = zchannel >= 0 ? zchannel + 1 : fgkNZChannels;
  Int_t i = 0;
  Int_t j = 0;
  TCanvas *c = new TCanvas("zchmap", "Z-Chhannel Mapping");
  c->cd();
  TGraph **graphz = new TGraph*[fgkNZChannels];
  for (Int_t zch = zchmin; zch < zchmax; zch++)
    graphz[zch] = new TGraph;
  TGraphAsymmErrors *graph = new TGraphAsymmErrors();
  graph->SetTitle("Z-Channel Map");
  graph->SetPoint(i, 0, 0); // vertex
  graph->SetPointError(i++, 20, 20, 0, 0);
  //  graph->SetRange //????
  for (Int_t iLayer = 0; iLayer < fGeo->Nlayer(); iLayer++) {
    for (Int_t iStack = 0; iStack < fGeo->Nstack(); iStack++) {
      AliTRDpadPlane *pp = fGeo->GetPadPlane(iLayer, iStack);
      for (Int_t iRow = 0; iRow < fGeo->GetRowMax(iLayer, iStack, 0); iRow++) {
	graph->SetPoint(i, pp->GetRowPos(iRow), fGeo->GetTime0(iLayer) - fGeo->CdrHght());
	graph->SetPointError(i++, pp->GetRowSize(iRow), 0, 0, 0);
	for (Int_t zch = zchmin; zch < zchmax; zch++)
	  if (fZSubChannel[iStack][zch][iLayer][iRow] != 0)
	    if (subchannel == 0 || fZSubChannel[iStack][zch][iLayer][iRow] == subchannel)
	      graphz[zch]->SetPoint(j++, pp->GetRowPos(iRow)  - pp->GetRowSize(iRow)/2, fGeo->GetTime0(iLayer) - fGeo->CdrHght());
      }
    }
  }
  graph->SetMarkerStyle(kDot);
  graph->Draw("AP");
  gROOT->Add(graph);
  for (Int_t zch = zchmin; zch < zchmax; zch++) {
    graphz[zch]->SetMarkerStyle(kCircle);
    graphz[zch]->SetMarkerColor(zch+2);
    graphz[zch]->SetMarkerSize(0.3 + zch*0.2);
    graphz[zch]->Draw("P");
    gROOT->Add(graphz[zch]);
  }
  delete [] graphz;
  return kTRUE;
}

Int_t AliTRDgtuParam::GetCiAlpha(Int_t layer) const
{
  // get the constant for the calculation of alpha

  Int_t ci = TMath::Nint(GetChamberThickness() / fGeo->GetTime0(layer) * GetBinWidthY() / GetBinWidthdY() * (1 << (GetBitExcessAlpha() + GetBitExcessY() + 1)) );
  return ci;
}

Int_t AliTRDgtuParam::GetCiYProj(Int_t layer) const
{
  // get the constant for the calculation of y_proj

  Int_t ci = 0;

  if (fgUseGTUconst) {
    Float_t xmid = (fgkRadius[0] + fgkRadius[5]) / 2.;
    ci = TMath::Nint(- (fgkRadius[layer] - xmid) * fgkBinWidthdY / (fgkBinWidthY * fgkThickness) * (1 << GetBitExcessYProj()));
  } else {
    Float_t xmid = (fGeo->GetTime0(0) + fGeo->GetTime0(fGeo->Nlayer()-1)) / 2.;
    ci = TMath::Nint(- (fGeo->GetTime0(layer) - xmid) / GetChamberThickness() * GetBinWidthdY() / GetBinWidthY() * (1 << GetBitExcessYProj()) );
  }

  return ci;
}

Int_t AliTRDgtuParam::GetYt(Int_t stack, Int_t layer, Int_t zrow) const
{
  // return yt for the calculation of y'

  Int_t yt = 0;

  if (fgUseGTUconst) {
    yt = TMath::Nint (- ( (layer % 2 ? 1. : -1.) *
			  GetZrow(stack, layer, zrow) * TMath::Tan(- 2./180. * TMath::Pi()) / fgkBinWidthY ));
  } else {
    yt = TMath::Nint (- ( (layer % 2 ? 1. : -1.) *
			  (GetGeo()->GetPadPlane(layer, stack)->GetRowPos(zrow) - GetGeo()->GetPadPlane(layer, stack)->GetRowSize(zrow) / 2.) *
			  TMath::Tan(- 2./180. * TMath::Pi()) ) / fgkBinWidthY );
  }

  return yt;
}

Bool_t AliTRDgtuParam::GenerateRecoCoefficients(Int_t trackletMask)
{
  // calculate the coefficients for the straight line fit
  // depending on the mask of contributing tracklets

  fCurrTrackletMask = trackletMask;

  TMatrix a(GetNLayers(), 3);
  TMatrix b(3, GetNLayers());
  TMatrix c(3, 3);

  const Int_t maskIdLut[64] = {
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,
    -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  2, -1,  3,  4,  5,
    -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1,  7, -1,  8,  9, 10,
    -1, -1, -1, 11, -1, 12, 13, 14, -1, 15, 16, 17, 18, 19, 20, 21
  };

  const Int_t c1Lut[32] = {
    -2371, -2474, -2474, -2474, -2563, -2448, -2578, -2578,
    -2578, -2670, -2557, -2578, -2578, -2670, -2557, -2578,
    -2670, -2557, -2763, -2557, -2644, -2523,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
  };
  /* correction factor for sagitta (not used at the moment)
  const Float_t epsCorrLut[32] = {
    1.12499, 1.18589, 1.18516, 1.18447, 1.12499, 1.06665, 1.30387, 1.15774,
    1.15741, 1.18596, 1.09696, 1.30201, 1.15703, 1.18516, 1.09662, 1.130026,
    1.18443, 1.09630, 1.12499, 1.09600, 1.06665, 1.04164,      -1,      -1,
    -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1
  };*/ 

  Int_t layerMaskId = maskIdLut[trackletMask];
  Int_t c1 = c1Lut[layerMaskId];
  //Float_t epsCorr = epsCorrLut[layerMaskId];

  fc1Inv = -GetShiftLengthNorm()/c1;

  Int_t firstHitLayer = 0 ,lastHitLayer = 5;
  while ((trackletMask & (1 << firstHitLayer)) == 0) {
    firstHitLayer++;
    if (firstHitLayer >= 3) {
      AliError(Form("Invalid tracklet mask: %i", trackletMask));
      break;
    }
  }
  while ((trackletMask & (1 << lastHitLayer)) == 0) {
    lastHitLayer--;
    if (lastHitLayer < 3) {
      AliError(Form("Invalid tracklet mask: %i", trackletMask));
      break;
    }
  }  
  Float_t dX = fGeo->Cheight() + fGeo->Cspace(); // distance between two consecutive layers
  fLengthNorm = (Int_t) (-4e3 * dX/ TMath::Power(((lastHitLayer - firstHitLayer) * dX), 3) * GetShiftLengthNorm() * GetBinWidthY());
  //fLengthNorm *= epsCorr;

  CalculatePrefactors(trackletMask);

  for (Int_t layer = 0; layer < GetNLayers(); layer++) {
      if ( (trackletMask & (1 << layer)) == 0) {
    a(layer, 0) = 0;
    a(layer, 1) = 0;
    a(layer, 2) = 0;
      }
      else {
	  a(layer, 0) = 1;
	  a(layer, 1) = fGeo->GetTime0(layer);
	  a(layer, 2) = (layer % 2 ? 1 : -1) * fGeo->GetTime0(layer);
      }
  }

  b.Transpose(a);
  c = b * a;
  c.InvertFast();
  b = c * b;

  for (Int_t layer = 0; layer < GetNLayers(); layer++) {
      fAki[layer] = b.GetMatrixArray()[layer];
      fBki[layer] = b.GetMatrixArray()[GetNLayers() + layer];
      fCki[layer] = b.GetMatrixArray()[2 * GetNLayers() + layer];
    }
  return kTRUE;
}

Bool_t AliTRDgtuParam::CalculatePrefactors(Int_t trackletMask)
{
  fPki[0] = -4;
  fPki[1] =  2;
  fPki[2] =  2;
  fPki[3] =  2;
  fPki[4] =  2;
  fPki[5] = -4;
  Int_t firstHitLayer = 0;
  Int_t lastHitLayer = GetNLayers()-1;
  for (Int_t layer = 0; layer <= lastHitLayer; ++layer) {
      if ( (trackletMask & (1 << layer)) == 0) {
        fPki[layer] = 0;
        if (layer == firstHitLayer){
          fPki[lastHitLayer]++;
          fPki[layer+1] = fPki[lastHitLayer];
          firstHitLayer++;
        }
        else if (layer == lastHitLayer){
          fPki[firstHitLayer]++;
          if (fPki[layer-1] != 0) {
            fPki[layer-1] = fPki[firstHitLayer];
            if (fPki[firstHitLayer+1] == 0) {
              --fPki[layer-1];
            }
          }
          if (fPki[layer-1] == 0){
            fPki[firstHitLayer]++; 
            fPki[layer-2] = fPki[firstHitLayer];
          }
          if (fPki[layer-2] == 0) {
            fPki[layer-1]++;
          }
        }
        else if (fPki[layer-1] == 0){
          fPki[layer-2]++;
          fPki[layer+1] += 2;
        }
        else {
          fPki[layer-1]++;
          fPki[layer+1]++;
        }
    }
  }
  return kTRUE;
}

Int_t AliTRDgtuParam::GetAki(Int_t k, Int_t i)
{
  // get A_ki for the calculation of the tracking parameters
  if (fgUseGTUconst) {
    Int_t maskId = fgkMaskID[k];
    return fgkAcoeff[maskId][i];
  } else {
    if (fCurrTrackletMask != k)
      GenerateRecoCoefficients(k);
    return -(((Int_t) fAki[i]) << 9);
  }
}

Float_t AliTRDgtuParam::GetBki(Int_t k, Int_t i)
{
  // get B_ki for the calculation of the tracking parameters

  if (fCurrTrackletMask != k)
    GenerateRecoCoefficients(k);

  return fBki[i];
}

Float_t AliTRDgtuParam::GetCki(Int_t k, Int_t i)
{
  // get B_ki for the calculation of the tracking parameters

  if (fCurrTrackletMask != k)
    GenerateRecoCoefficients(k);

  return fCki[i];
}

Int_t AliTRDgtuParam::GetPki(Int_t k, Int_t i)
{
  // get P_ki for the calculation of the sagitta
  if (fCurrTrackletMask != k)
    GenerateRecoCoefficients(k);
  return fPki[i];
}

Int_t AliTRDgtuParam::GetLengthNorm(Int_t k)
{
  // get length normalization to obtain 1/pt from sagitta
  if (fCurrTrackletMask != k)
    GenerateRecoCoefficients(k);
  return fLengthNorm;
}

Int_t AliTRDgtuParam::Getc1Inv(Int_t k)
{
  // get invers c1 for mask independent cut on pt deviation
  if (fCurrTrackletMask != k)
    GenerateRecoCoefficients(k);
  return fc1Inv;
}

/*
Float_t AliTRDgtuParam::GetD(Int_t k) const
{
  // get the determinant for the calculation of the tracking parameters

  TMatrix t(3, 3);
  for (Int_t i = 0; i < GetNLayers(); i++) {
    if ( !((k >> i) & 0x1) )
      continue;
    Float_t xi = fGeo->GetTime0(i);
    t(0,0) += 1;
    t(1,0) += xi;
    t(2,0) += TMath::Power(-1, i) * xi;
    t(0,1) += xi;
    t(1,1) += TMath::Power(xi, 2);
    t(2,1) += TMath::Power(-1, i) * TMath::Power(xi, 2);
    t(0,2) += TMath::Power(-1, i) * xi;
    t(1,2) += TMath::Power(-1, i) * TMath::Power(xi, 2);
    t(2,2) += TMath::Power(xi, 2);
  }
  return t.Determinant();
}

Bool_t AliTRDgtuParam::GetFitParams(TVectorD& rhs, Int_t k)
{
  // calculate the fitting parameters
  // will be changed!

  TMatrix t(3,3);
  for (Int_t i = 0; i < GetNLayers(); i++) {
    if ( !((k >> i) & 0x1) )
      continue;
    Float_t xi = fGeo->GetTime0(i);
    t(0,0) += 1;
    t(1,0) += xi;
    t(2,0) += TMath::Power(-1, i) * xi;
    t(0,1) += xi;
    t(1,1) += TMath::Power(xi, 2);
    t(2,1) += TMath::Power(-1, i) * TMath::Power(xi, 2);
    t(0,2) -= TMath::Power(-1, i) * xi;
    t(1,2) -= TMath::Power(-1, i) * TMath::Power(xi, 2);
    t(2,2) -= TMath::Power(xi, 2);
  }
  TDecompLU lr(t);
  lr.Solve(rhs);
  return lr.Decompose();
}
*/

Int_t AliTRDgtuParam::GetZpos(Int_t stack, Int_t layer, Int_t binZ)
{

    if ( (layer<0) || (layer>5) )
    {
      AliError(Form("Wrong layer index %i\n", layer));
      return 9999;
    }
    if ( (stack<0) || (stack>4) )
    {
      AliError(Form("Wrong stack index %i\n", stack));
      return 9999;
    }
    if ( (binZ<0) || (binZ>15) )  
    {
      AliError(Form("Wrong binZ index %i\n", binZ));
      return 9999;
    }
    if ( (stack==2) && (binZ>11) )
    {
      AliError(Form("Wrong binZ index %i\n for stack 2", binZ));
      return 9999;
    }

    return fgkZposLookupTable[stack][layer][binZ]*10;
}

Int_t AliTRDgtuParam::GetTanOfTiltingAngle(Int_t layer)
{
  //Float_t erg = TMath::Tan(2*TMath::DegToRad());
  Float_t erg = 0.034920769;
  erg *= 1e4;
  return (layer%2==0)? erg:-1.*erg;
}

Bool_t AliTRDgtuParam::GetIntersectionPoints(Int_t k, Float_t &x1, Float_t &x2)
{
  // get the x-coord. of the assumed circle/straight line intersection points

  Int_t l1 = -1;
  Int_t l2 = -1;
  Int_t nHits = 0;
  for (Int_t layer = 0; layer < GetNLayers(); layer++) {
    if ( (k >> layer) & 0x1 ) {
      if (l1 < 0)
	l1 = layer;
      l2 = layer;
      nHits++;
    }
  }

  if ( (l1 >= 0) && (l2 >= 0) ) {
    x1 = fGeo->GetTime0(l1) + 10./6 * (nHits -1);
    x2 = fGeo->GetTime0(l2) - 10./6 * (nHits -1);
    return kTRUE;
  }
  else
    return kFALSE;
}

Int_t AliTRDgtuParam::GetPt(Int_t layerMask, Int_t a, Float_t /* b */, Float_t x1, Float_t x2, Float_t magField)
{
  // returns 0.3 * B * 1/a (1/128 GeV/c)
  // a : offset, b : slope (not used)

  // protect against division by zero, covers both cases
  if ((a >> 2) == 0)
    return fgkPtInfinity;

  if (fgUseGTUconst) {
    //----- calculation as in the GTU ----
    const Int_t maskIdLut[64] = {
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,
      -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  2, -1,  3,  4,  5,
      -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1,  7, -1,  8,  9, 10,
      -1, -1, -1, 11, -1, 12, 13, 14, -1, 15, 16, 17, 18, 19, 20, 21
    };

    const Int_t c1Lut[32] = {
      -2371, -2474, -2474, -2474, -2563, -2448, -2578, -2578,
      -2578, -2670, -2557, -2578, -2578, -2670, -2557, -2578,
      -2670, -2557, -2763, -2557, -2644, -2523,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
    };

    Int_t layerMaskId = maskIdLut[layerMask];
    Int_t c1 = c1Lut[layerMaskId];
    Int_t c1Ext = c1 << 8;
    Int_t ptRawStage4 = c1Ext / (a >> 2);
    Int_t ptRawComb4 = ptRawStage4;
    Int_t ptExtComb4 = (ptRawComb4 > 0) ? ptRawComb4 + 33 : ptRawComb4 - 30;

    return ((Int_t) ptExtComb4/2);
  }
  else {
    //----- simple calculation -----
    Float_t c1 = x1 * x2 / 2. / 10000.; // conversion cm to m
    Float_t r = 0;
    if ( (a >> 1) != 0)
      r = (0.3 * magField / 2. / (fgkBinWidthY/100.)) * (((Int_t) c1) << 8) / (a >> 1); //??? why shift of a?

    Int_t pt = (Int_t) (2 * r);
    if (pt >= 0)
      pt += 32;
    else
      pt -= 29;
    pt /= 2;
    return pt;
  }
}

Double_t AliTRDgtuParam::CorrectYforAlignmentOCDB(Int_t det, Double_t trklZpos)
{
  Double_t shiftCorrFactor=0;
  Double_t rotationCorrFactor=0;

  GetYAlignmentDataOCDB(det, &shiftCorrFactor, &rotationCorrFactor);
  return (trklZpos*TMath::Tan(rotationCorrFactor)) - shiftCorrFactor; 
}

void AliTRDgtuParam::GetYAlignmentDataOCDB(Int_t chamber, Double_t *shiftCorrFactor, Double_t *rotationCorrFactor)
{
  const Double_t sm0AlignYShiftCorr[30]={0.950896, 0.879845, 1.09222, 0.973455, 1.07732, 1.09708, 0.800331, 0.810261, 0.957055, 1.01692, 0.995464, 0.911438, 0.749624, 0.862145, 0.929711, 1.00373, 0.970462, 1.07445, 0.869766, 0.99827, 1.03514, 1.16184, 1.10103, 1.13804, 0.850769, 0.970176, 0.957055, 1.00373, 1.05887, 1.11904};
  const Double_t sm0AlignRotationCorr[30]={0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472, 0.000590472};
  const Double_t sm1AlignYShiftCorr[30]={1.06036, 1.00293, 1.00074, 1.16708, 1.2733, 1.12067, 0.953733, 0.913071, 0.955806, 0.988405, 1.06255, 0.991189, 0.849538, 0.951239, 0.963683, 0.981054, 1.03524, 0.789439, 0.861432, 0.999114, 0.967925, 1.04253, 1.16334, 1.14535, 0.793966, 0.905693, 0.786929, 0.942292, 1.01108, 1.08596};
  const Double_t sm1AlignRotationCorr[30]={-0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439, -0.000106439};
  const Double_t sm2AlignYShiftCorr[30]={1.1102, 1.0764, 1.0426, 1.0088, 0.975, 0.9412, 1.1102, 1.0764, 1.0426, 1.0088, 0.975, 0.9412, 1.1102, 1.0764, 1.0426, 1.0088, 0.975, 0.9412, 1.1102, 1.0764, 1.0426, 1.0088, 0.975, 0.9412, 1.1102, 1.0764, 1.0426, 1.0088, 0.975, 0.9412};
  const Double_t sm2AlignRotationCorr[30]={6.08449e-17, 6.0845e-17, 6.0959e-17, 6.10827e-17, 6.15405e-17, 6.09767e-17, 6.08287e-17, 6.08287e-17, 6.0964e-17, 6.09122e-17, 6.08748e-17, 6.10829e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.07456e-17, 6.07456e-17, 6.07133e-17, 6.07628e-17, 6.10402e-17, 6.13227e-17, 6.08112e-17, 6.08112e-17, 6.17087e-17, 6.17742e-17, 6.15405e-17, 6.11445e-17};
  const Double_t sm3AlignYShiftCorr[30]={1.18864, 1.21645, 1.24426, 1.27207, 1.29988, 1.32768, 1.18864, 1.21645, 1.24426, 1.27207, 1.29988, 1.32768, 1.18864, 1.21645, 1.24426, 1.27207, 1.29988, 1.32768, 1.18864, 1.21645, 1.24426, 1.27207, 1.29988, 1.32768, 1.18864, 1.21645, 1.24426, 1.27207, 1.29988, 1.32768};
  const Double_t sm3AlignRotationCorr[30]={6.13935e-17, 6.13935e-17, 6.17901e-17, 6.1582e-17, 6.15405e-17, 6.13146e-17, 6.17313e-17, 6.17313e-17, 6.17758e-17, 6.18921e-17, 6.20216e-17, 6.14961e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.11756e-17, 6.08427e-17, 6.08431e-17, 6.09689e-17, 6.09122e-17, 6.0969e-17, 6.04721e-17, 6.08659e-17, 6.08659e-17, 6.10143e-17, 6.12837e-17, 6.10952e-17, 6.10829e-17};
  const Double_t sm4AlignYShiftCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm4AlignRotationCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm5AlignYShiftCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm5AlignRotationCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm6AlignYShiftCorr[30]={0.00720092, -0.0111113, -0.0294235, -0.0477357, -0.0660479, -0.0843601, 0.00720092, -0.0111113, -0.0294235, -0.0477357, -0.0660479, -0.0843601, 0.00720092, -0.0111113, -0.0294235, -0.0477357, -0.0660479, -0.0843601, 0.00720092, -0.0111113, -0.0294235, -0.0477357, -0.0660479, -0.0843601, 0.00720092, -0.0111113, -0.0294235, -0.0477357, -0.0660479, -0.0843601};
  const Double_t sm6AlignRotationCorr[30]={6.12302e-17, 6.12334e-17, 6.12366e-17, 6.12076e-17, 6.12421e-17, 6.12893e-17, 6.12346e-17, 6.12342e-17, 6.12414e-17, 6.12159e-17, 6.12642e-17, 6.12702e-17, 6.12287e-17, 6.12287e-17, 6.12464e-17, 6.12464e-17, 6.12142e-17, 6.12142e-17, 6.12341e-17, 6.12341e-17, 6.12248e-17, 6.12159e-17, 6.1188e-17, 6.13011e-17, 6.12335e-17, 6.12338e-17, 6.12228e-17, 6.12636e-17, 6.12173e-17, 6.13038e-17};
  const Double_t sm7AlignYShiftCorr[30]={-0.866054, -0.946888, -0.936051, -1.04962, -0.99742, -1.11695, -0.871263, -0.866588, -0.872928, -0.994759, -0.960582, -1.02686, -0.840704, -0.920968, -0.983293, -0.985986, -1.03693, -0.990354, -0.841495, -0.898174, -0.977235, -0.864823, -0.960582, -1.04184, -0.774481, -0.740641, -0.901039, -0.813138, -0.958083, -0.844561};
  const Double_t sm7AlignRotationCorr[30]={0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095, 0.00152095};
  const Double_t sm8AlignYShiftCorr[30]={-1.08741, -1.04946, -1.13455, -1.25708, -1.14229, -1.12472, -1.04684, -1.06298, -1.04691, -1.01174, -1.02042, -1.068, -1.12634, -1.13846, -1.14718, -1.23131, -1.1225, -1.13288, -1.03394, -0.997171, -1.09563, -1.06354, -0.954007, -0.918441, -1.00773, -1.04946, -1.03248, -0.914811, -0.912203, -0.827483};
  const Double_t sm8AlignRotationCorr[30]={0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878, 0.000844878};
  const Double_t sm9AlignYShiftCorr[30]={-0.997909, -1.14595, -1.10428, -1.04842, -1.03343, -1.18205, -1.0511, -1.12617, -1.08041, -1.09323, -1.11159, -1.19614, -1.09481, -1.10916, -1.1128, -1.14028, -1.16596, -1.07021, -1.04761, -1.00465, -1.14669, -1.05859, -1.05879, -1.11359, -0.89919, -0.935687, -1.12952, -0.99086, -1.01247, -0.994654};
  const Double_t sm9AlignRotationCorr[30]={0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181, 0.000224181};
  const Double_t sm10AlignYShiftCorr[30]={-1.36423, -1.46127, -1.42239, -1.4497, -1.25872, -1.23821, -1.38106, -1.42123, -1.39686, -1.3602, -1.24536, -1.26131, -1.50418, -1.38895, -1.33199, -1.34877, -1.28903, -1.259, -1.41907, -1.30094, -1.3579, -1.21426, -1.21636, -1.06847, -1.44013, -1.21849, -1.32739, -1.20238, -1.21579, -1.06474};
  const Double_t sm10AlignRotationCorr[30]={0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463, 0.000120463};
  const Double_t sm11AlignYShiftCorr[30]={-1.31965, -1.54112, -1.47852, -1.64944, -4.4449, -1.80533, -1.35592, -1.4903, -1.54163, -1.5559, -1.58468, -1.74079, -1.51473, -1.53837, -1.6997, -1.7125, -1.81951, -1.92436, -1.45354, -1.39703, -1.63136, -1.53742, -1.61779, -1.71032, -1.338, -1.21635, -1.42423, -1.40279, -1.43874, -1.42863};
  const Double_t sm11AlignRotationCorr[30]={0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076, 0.000348076};
  const Double_t sm12AlignYShiftCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm12AlignRotationCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm13AlignYShiftCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm13AlignRotationCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm14AlignYShiftCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm14AlignRotationCorr[30]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const Double_t sm15AlignYShiftCorr[30]={0.0615559, 0.0761089, 0.244263, 0.193727, 0.278576, 0.199347, 0.0354735, -0.007305, 0.087983, 0.0648831, 0.136816, 0.0515244, 0, 0, 0, 0, 0, 0, 0.0602967, 0.0983063, 0.183299, 0.269317, 0.239239, 0.311994, 0.0413288, 0.0937568, 0.164063, 0.263629, 0.220605, 0.314462};
  const Double_t sm15AlignRotationCorr[30]={-0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, 0, 0, 0, 0, 0, 0, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365, -0.000268365};
  const Double_t sm16AlignYShiftCorr[30]={0.410348, 0.404458, 0.570151, 0.56562, 0.669698, 0.595227, 0.366881, 0.251549, 0.433893, 0.505892, 0.582798, 0.546805, 0.288368, 0.291832, 0.37178, 0.511245, 0.535215, 0.519403, 0.30927, 0.379342, 0.492418, 0.604519, 0.567487, 0.689209, 0.164414, 0.290361, 0.323621, 0.458511, 0.495891, 0.56392};
  const Double_t sm16AlignRotationCorr[30]={-0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037, -0.000209037};
  const Double_t sm17AlignYShiftCorr[30]={0.924637, 0.830734, 0.851936, 0.925559, 1.05194, 0.644287, 0.861304, 0.773108, 0.837512, 0.851351, 0.898791, 0.833368, 0.797453, 0.769815, 0.851936, 0.917353, 0.898791, 0.853596, 0.771743, 0.805229, 0.855267, 0.989788, 0.898791, 0.922218, 0.634823, 0.792299, 0.806066, 1.01563, 0.970954, 0.922218};
  const Double_t sm17AlignRotationCorr[30]={8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05, 8.41898e-05};

  const Double_t *alignYShiftCorr[18];
  const Double_t *alignRotationCorr[18];
  alignYShiftCorr[0] = sm0AlignYShiftCorr;
  alignRotationCorr[0] = sm0AlignRotationCorr;
  alignYShiftCorr[1] = sm1AlignYShiftCorr;
  alignRotationCorr[1] = sm1AlignRotationCorr;
  alignYShiftCorr[2] = sm2AlignYShiftCorr;
  alignRotationCorr[2] = sm2AlignRotationCorr;
  alignYShiftCorr[3] = sm3AlignYShiftCorr;
  alignRotationCorr[3] = sm3AlignRotationCorr;
  alignYShiftCorr[4] = sm4AlignYShiftCorr;
  alignRotationCorr[4] = sm4AlignRotationCorr;
  alignYShiftCorr[5] = sm5AlignYShiftCorr;
  alignRotationCorr[5] = sm5AlignRotationCorr;
  alignYShiftCorr[6] = sm6AlignYShiftCorr;
  alignRotationCorr[6] = sm6AlignRotationCorr;
  alignYShiftCorr[7] = sm7AlignYShiftCorr;
  alignRotationCorr[7] = sm7AlignRotationCorr;
  alignYShiftCorr[8] = sm8AlignYShiftCorr;
  alignRotationCorr[8] = sm8AlignRotationCorr;
  alignYShiftCorr[9] = sm9AlignYShiftCorr;
  alignRotationCorr[9] = sm9AlignRotationCorr;
  alignYShiftCorr[10] = sm10AlignYShiftCorr;
  alignRotationCorr[10] = sm10AlignRotationCorr;
  alignYShiftCorr[11] = sm11AlignYShiftCorr;
  alignRotationCorr[11] = sm11AlignRotationCorr;
  alignYShiftCorr[12] = sm12AlignYShiftCorr;
  alignRotationCorr[12] = sm12AlignRotationCorr;
  alignYShiftCorr[13] = sm13AlignYShiftCorr;
  alignRotationCorr[13] = sm13AlignRotationCorr;
  alignYShiftCorr[14] = sm14AlignYShiftCorr;
  alignRotationCorr[14] = sm14AlignRotationCorr;
  alignYShiftCorr[15] = sm15AlignYShiftCorr;
  alignRotationCorr[15] = sm15AlignRotationCorr;
  alignYShiftCorr[16] = sm16AlignYShiftCorr;
  alignRotationCorr[16] = sm16AlignRotationCorr;
  alignYShiftCorr[17] = sm17AlignYShiftCorr;
  alignRotationCorr[17] = sm17AlignRotationCorr;

  Int_t sm=chamber/30;
  Int_t det=chamber%30;
  *shiftCorrFactor=alignYShiftCorr[sm][det];
  *rotationCorrFactor=alignRotationCorr[sm][det];
}


