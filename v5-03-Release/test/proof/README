1. run.C is the main macro to use. It takes as an argument the raw-data run number to be reconstructed.
 Note: don't forget to change the username there.

2. rec.C is called from run.C and does:
*) raw-data input is set to all the raw-data files from the run (rec.SetInput("raw://runXXX"))
*) QA is switched off due to high memory consumption, it can enabled in case one reconstructs less detectors.
*) rec.SetEventRange() is used to limit the time of the query. Can be changed according to the needs.
*) Output is a dataset, which one can setup by rec.SetOutput. The syntax is simple, just follow the example
and put a coma separated list of output root file just between the first : and @. For example one case do:

root_archive.zip#AliESDs.root:AliESDs.root,AliESDfriends.root,MUON.RecPoints.root@dataset://runXXX

wildcards should work, but better define explicit names.
The output is a normal CAF dataset (as the one staged from the grid).

3. prepareAlienCollection.sh is a helper script in case the run is long and one wants to select a subset
of files to bre reconstructed. The syntax is:

./prepareAliEnCollection.sh XXX XXX.txt

Then rec.C should be changed, so that the input becomes 'collection://XXX.txt'.
 Note: alien-token-init should be in the path.

4. rec.sh is a simple shell script which takes the run number as an argument and calls
'aliroot run.C'
