Simple instructions on how to produce Material Budget plots
===========================================================

Here there are some instruction on how to produce Material Budget
plots showing separately the contribution of each component or
material (such as, e.g., Figs. 4.3 in the TDR):


1) all needed files are in $ALICE_ROOT/ITS/UPGRADE ; in particular
use the Config.C and CreateITSUv1.C in there


2) geometry files with each component are needed; to produce them
it is enough to run a simulation changing the value of

        const int kBuildLevel

in CreateITSUv1.C ; kBuildLevel = 0 corresponds to the complete
description with all materials (and should be used for any real
simulation). Geometry files obtained with values of kBuildLevel from
0 to 5 (for the Inner Barrel) or 6 (for the Outer Barrel) are needed
(for the IB the build levels 5 and 6 are identical).


3) to easily produce all needed file in one go, the script runMatBud.sh
can be used. Simply execute it to produce all geometry.root files
needed for further analysis. The file CreateITSUv1.C_template is
required in the same directory where the script is executed: it sets the
proper value of kBuildLevel and saves it as CreateITSUv1.C to be used in
the simulation.

The runMatBud.sh script accepts an optional parameter, the maximal
kBuildLevel value to be used; the default is 6. So

        ./runMatBud.sh

produces seven geometry files (named from geometry_0.root to
geometry_6.root), while for instance

        ./runMatBud.sh 5

produces six geometry files (named from geometry_0.root to geometry_5.root)


4) Once the geometry files are produced, the macro GetMaterialBudget.C
can be used to produce the plots. After starting an aliroot session,
first of all the needed libraries and the macro are to be loaded

        aliroot
        root [0] gSystem->Load("libITSUpgradeBase")
        root [1] gSystem->Load("libITSUpgradeSim")
        root [2] .L GetMaterialBudget.C

then the function DrawMaterialBudget_Splitted can be called to
produce a plot similar to those of the TDR, i.e. the X/X0 fraction
as a function of the azimuthal angle phi for a given layer. The
function takes three arguments: the layer number, the minimum radius
and the maximum radius, for instance

        root [3] DrawMaterialBudget_Splitted(3,19.4,19.9)

the macro takes care automatically of the different number of build
levels for IB and OB. The plot is also saved in a file named
Material-details.pdf

Other useful functions in the same macro are
i) PrintMaterialDefs to print a list of all ITS materials and their
definition; it takes the geometry.root file as optional argument

        root [4] PrintMaterialDefs()

ii) DrawMaterialBudget_FromTo to plot a 2D histogram with the material
budget for a given layer vs eta and phi. Warning: the function assumes
that the geometry file is called "geometry.root"!

The function takes four arguments: the first three are the layer number
and the minimum and maximum radius; if the optional fourth argument
is false (kFALSE or 0) also a 1D histogram is produced with the budget
as a function of phi (the default is true, so only the 2D plot is shown)

        root [5] DrawMaterialBudget_FromTo(4,24.3,24.8,0)

The plot is also saved in a file named either Material-2D.pdf or
Material-1D.pdf

iii) DrawMaterialBudget_inPhi to produce 2D plots of material budget
vs phi and fraction of X/X0. The macro takes three optional arguments:
the geometry file (defaults to "geometry.root"), the layer number and
a flag to use a Root file (default) or a GDML file (if true)

        root [6] DrawMaterialBudget_inPhi()

if no layer is specified, all layers and the beam pipe are shown

iv) DrawMaterialBudget_EtaVsPhi to produce a 2D plot of material
budget as a function of eta (in the range +/- 1) and phi. The macro
takes three optional arguments: the geometry file (defaults to
"geometry.root"), the layer number and a flag to use a Root file
(default) or a GDML file (if true)

        root [7] DrawMaterialBudget_inPhi()

if no layer is specified, all layers and the beam pipe are shown
along with the total material for the Inner and Outer Barrels
separately.


5) To avoid the need of loading by hand the libraries and the macro
and the necessity of entering the correct radii, the same plot of
the TDR produced by the function DrawMaterialBudget_Splitted can be
obtained with the macro MakeMatBudPlots : it takes only one argument,
the layer number, and takes care of the housekeeping needed to get
the plot

        root [7] .x MakeMatBudPlots.C(2)


-----------------------------------------------------------
For questions, comments or suggestions: Mario.Sitta@cern.ch

