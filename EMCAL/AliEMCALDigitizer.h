#ifndef ALIEMCALDigitizer_H
#define ALIEMCALDigitizer_H
/* Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
 * See cxx source for full Copyright notice                               */

/* $Id$ */

//_________________________________________________________________________
//  Task Class for making Digits in EMCAL      
//                  
//*-- Author: Sahal Yacoob (LBL)
// based on : AliPHOSDigit
//_________________________________________________________________________ 


// --- ROOT system ---
#include "TObjString.h"
class TArrayI ;
class TClonesArray ; 

// --- Standard library ---
#include <stdlib.h>

// --- AliRoot header files ---
#include "AliDigitizer.h"
class AliEMCALSDigitizer ;
class AliRunDigitizer ;

class AliEMCALDigitizer: public AliDigitizer {

public:
  AliEMCALDigitizer() ;          // ctor
  AliEMCALDigitizer(const char *headerFile, const char * sDigitsBranchTitle = "Default", const Bool_t toSplit = kFALSE) ; 
  AliEMCALDigitizer(AliRunDigitizer * ard) ;
  AliEMCALDigitizer(const AliEMCALDigitizer & dtizer) 
                  {( (AliEMCALDigitizer &)dtizer ).Copy(*this) ;} 
  virtual ~AliEMCALDigitizer() ;       

  void    Digitize(const Int_t event);          // Make Digits from SDigits stored in fSDigits
  void    Exec(Option_t *option);               // Supervising method

  const Float_t GetTowerThreshold() const { return fTowerDigitThreshold;}
  const Float_t GetPedestal()     const { return fPedestal; }
  const Float_t GetPinNoise()     const { return fPinNoise;}
  const Float_t GetSlope()        const { return fSlope; }
  const Float_t GetTimeResolution() const { return fTimeResolution ; }
  const Float_t GetTowerchannel() const { return fADCchannelTower ; }
  const Float_t GetTowerpedestal() const { return fADCpedestalTower ; }
  const Float_t GetPreShochannel() const { return fADCchannelPreSho ; }
  const Float_t GetPreShopedestal() const { return fADCpedestalPreSho ; }

  void    SetTowerThreshold(Float_t EMCThreshold)  {fTowerDigitThreshold = EMCThreshold;}
  void    SetPinNoise(Float_t PinNoise )         {fPinNoise = PinNoise;}

  //General
  const Int_t   GetDigitsInRun()  const { return fDigitsInRun; } ;
  void  MixWith(char* HeaderFile) ; // Add another one file to mix
  void  Print(Option_t* option)const ;
 
 AliEMCALDigitizer & operator = (const AliEMCALDigitizer & rvalue)  {
    // assignement operator requested by coding convention but not needed
   Fatal("operator =", "not implemented") ;  
   return *this ; 
  }

private:

  Bool_t  Init();                   
  void    InitParameters() ; 
  void    PrintDigits(Option_t * option) ;
  void    WriteDigits(Int_t evt) ;            // Writes Digits for particular event
  Float_t TimeOfNoise(void) ;                 // Calculate time signal generated by noise
  //Calculate the time of crossing of the threshold by front edge
  Float_t FrontEdgeTime(TClonesArray * ticks) ;
  Int_t   DigitizeEnergy(Float_t energy, Int_t absId) ;

private:
  
  Bool_t fDefaultInit;               //! Says if the task was created by defaut ctor (only parameters are initialized)
  Int_t fDigitsInRun ;               //! Total number of digits in one run
 
  Float_t fPedestal ;                // Calibration parameters 
  Float_t fSlope ;                   // read from SDigitizer

  Float_t fPinNoise ;                // Electronics noise in EMC
  Float_t fTowerDigitThreshold  ;    // Threshold for storing digits in EMC
  Float_t fPreShowerDigitThreshold ; // Threshold for Preshower digits

  Float_t fTimeResolution ;          // Time resolution of FEE electronics
  Float_t fTimeThreshold ;           // Threshold to start timing for given crystall
  Float_t fTimeSignalLength ;        // Length of the timing signal 

  Float_t fADCchannelTower ;         // width of one ADC channel in Tower (GeV)
  Float_t fADCpedestalTower ;        //
  Int_t fNADCTower ;                 // number of channels in Tower ADC

  Float_t fADCchannelPreSho ;        // width of one ADC channel in Pre Shower (GeV)
  Float_t fADCpedestalPreSho ;       // 
  Int_t fNADCPreSho ;                // number of channels in Pre Shower ADC

  Bool_t  fToSplit ;                 //! Do we work in the split mode
  TFile * fSplitFile ;               //! file in which Digits will eventually be stored

  ClassDef(AliEMCALDigitizer,1)  // description 

};


#endif // AliEMCALDigitizer_H
