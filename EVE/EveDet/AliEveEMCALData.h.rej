diff a/EVE/EveDet/AliEveEMCALData.h b/EVE/EveDet/AliEveEMCALData.h	(rejected hunks)
@@ -4,12 +4,14 @@
 /* Copyright(c) 1998-1999, ALICE Experiment at CERN, All rights reserved. *
  * See cxx source for full Copyright notice                               */
 
+///
 /// \class AliEveEMCALData
 /// \brief EMCal event display data handling
 ///
 /// Fill containers for visualisation of EMCAL data structures
-/// * read and store MC Hits    - read and store digits from esds or runloader
-/// * read and store clusters from esds or runloader 
+/// * read and store MC Hits information (AliEMCALHit) 
+/// * read and store digits from ESDs (CaloCells) or AliRunLoader (AliEMCALDigit).
+/// * read and store clusters from ESDs (CaloClusters) or AliRunLoader (AliEMCALRecPoint).
 ///
 /// \author Magali Estienne <magali.estienne@cern.ch>, SUBATECH. EMCal implementation, June 2008
 /// \author Gustavo Conesa Balbastre <Gustavo.Conesa.Balbastre@cern.ch>, LPSC-IN2P3-CNRS. DCal implementation + doxygen, May 2015.
@@ -27,70 +29,63 @@
 
 class map;
 class TTree;
-class AliRun;
-class AliRunLoader;
-class AliEMCAL;
-class AliEMCALLoader;
-class AliEMCALGeometry;
-class AliEveEMCALSModuleData;
 class TClonesArray; 
 class TGedFrame; 
 class TEveBoxSet; 
 class TEveUtil; 
 class TLorentzVector;
 
+class AliRunLoader;
+
+class AliEMCALGeometry;
+class AliEveEMCALSModuleData;
+
 class AliEveEMCALData : public TObject, public TEveRefCnt
 {
  public:
   
   AliEveEMCALData();
-  AliEveEMCALData(AliRunLoader* rl, TGeoNode* node, TGeoHMatrix* m);
+  AliEveEMCALData(AliRunLoader* rl, TGeoNode* node);//, TGeoHMatrix* m);
   ~AliEveEMCALData();
 
-  void SetTree(TTree* const tree);
-  void SetESD(AliESDEvent* const esd);
-  void SetNode(TGeoNode* const node);
-  void InitEMCALGeom(AliRunLoader* const rl);
+  void SetESD (AliESDEvent* esd)  { fESD  = esd  ; }
+  void SetNode(TGeoNode *  node)  { fNode = node ; }
+  
+  void InitEMCALGeom();
   void GetGeomInfo(Int_t id, Int_t &iSupMod, Double_t& x, Double_t& y, Double_t& z);
 
   void CreateAllSModules();
-  void CreateSModule(Int_t sm);
-  void DropAllSModules();
   void DeleteSuperModules();
 
-  void LoadHits(TTree* const t);
-  void LoadDigits(TTree* t);
-  void LoadRecPoints(TTree* const t);
-  void LoadHitsFromEMCALLoader(AliEMCALLoader* const emcl);
-  void LoadDigitsFromEMCALLoader(AliEMCALLoader* const emcl);
-  void LoadRecPointsFromEMCALLoader(AliEMCALLoader* const emcl);
+  void LoadHits();
+  void LoadDigits();
+  void LoadRecPoints();
+  
+  void LoadHitsFromEMCALLoader();
+  void LoadDigitsFromEMCALLoader();
+  void LoadRecPointsFromEMCALLoader();
+  
   void LoadDigitsFromESD();
   void LoadRecPointsFromESD();
-  void LoadRaw() const;
+  
+  /// Not implemented
+  void LoadRaw() const { ; } 
 
   AliEveEMCALSModuleData* GetSModuleData(Int_t sm);
-  TEvePointSet*           GetPointSetData() const {return fPoint;};
+  //  TEvePointSet*           GetPointSetData() const { return fPoint ; }
 
  protected:
   
-  AliEMCAL*         fEmcal;     ///< EMCal data member.
   AliEMCALGeometry* fGeom;      ///< Data member to set/call EMCAL geometry.
   TGeoNode*         fNode;      ///< Node for bbox definition.
-  TGeoHMatrix*      fHMatrix;   ///< Matrix for local to global transformation.
-  TTree*            fTree;      ///< Data Tree.
+//  TGeoHMatrix*      fHMatrix;   ///< Matrix for local to global transformation.
   AliESDEvent*      fESD;       ///< ESD event.
-  
+  AliRunLoader*     fRunLoader; ///< run loader
   Int_t             fNsm;       ///< Total number of Super Modules, EMCal+DCal.
 
-  std::vector<AliEveEMCALSModuleData*>   fSM;       ///< Vector of fNsm SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMfull;   ///< Vector of fNsmfull SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMhalf;   ///< Vector of fNhalf SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMfullD;  ///< Vector of fNsmfullD SModules.
-  std::vector<AliEveEMCALSModuleData*>   fSMhalfD;  ///< Vector of fNhalfD SModules.
-  
-  AliRunLoader*     fRunLoader; ///< Run Loader.
-  Int_t             fDebug;     ///< Debug option.
-  TEvePointSet*     fPoint;     ///< TEvePointSet for hits.
+  std::vector<AliEveEMCALSModuleData*>   fSM;  ///< Vector of fNsm SModules.
+
+  //  TEvePointSet*     fPoint;     ///< TEvePointSet for hits.
 
   // Temporary data members
   TLorentzVector    fClusterMom ; ///< Cluster momentum
@@ -100,7 +95,7 @@ class AliEveEMCALData : public TObject, public TEveRefCnt
   AliEveEMCALData           (const AliEveEMCALData &edata);  
   
   /// Assignment operator not implemented.
-  AliEveEMCALData& operator=(const AliEveEMCALData &edata); // Not implemented
+  AliEveEMCALData& operator=(const AliEveEMCALData &edata); 
 
   /// \cond CLASSIMP
   ClassDef(AliEveEMCALData, 2) ; 
